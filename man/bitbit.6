.\" bitbit, a bitboard based chess engine written in c.
.\" Copyright (C) 2022-2024 Isak Ellmer
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License, version 2 as
.\" published by the Free Software Foundation.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.

.TH BITBIT 6 "2022-11-11" "bitbit VERSION" "Games Manual"
.SH NAME
bitbit \- a bitboard based chess engine written in c
.SH SYNOPSIS
.B bitbit
[\fIOPTION\fR...]
.SH DESCRIPTION
\fBbitbit\fR, a bitboard based chess engine written in c implementing the
uci protocol.
.PP
It is possible to cancel all calculations with \fBSIGINT\fR.
.PP
Multiple commands may be given to \fBbitbit\fR at startup by separating
them with " , ".
See examples.
.SH OPTIONS
.TP
\fB--version\fR
Shows bitbit's version, then exits.
.TP
\fBhelp\fR
.br
Displays a general help page.
.TP
\fBversion\fR
.br
Shows bitbit's version.
.TP
\fBquit\fR
.br
Exits bitbit.
.TP
\fBclear\fR
.br
Clears the screen.
.TP
\fBmove\fR [\fIMOVE\fR]
.br
Does a move. The move string can be either in standard notation or
long algebraic notation e.g. Nf3 or g1f3.
.TP
\fBundo\fR
.br
Undos the last move.
.TP
\fBflip\fR
.br
Flips the side to move.
.TP
\fBperft\fR [\fIDEPTH\fR]
.br
Executes a performance test.
.TP
\fBposition\fR [\fIOPTION\fR] [\fIARG\fR]
.br
Sets or shows information about the position.
.in +2n
\fBfen\fR The passed argument is in fen format.
.br
\fBstartpos\fR Sets the start position.
.br
.in +2n
\fBmoves\fR moves are passed in long algebraic notation after either a fen is
given or the option startpos.
.TP
\fBgo\fR [\fIOPTION\fR]
.br
Evaluates the position.
.in +2n
\fBwtime\fR
.br
\fBbtime\fR Respective side's time in milliseconds.
.br
\fBwinc\fR
.br
\fBbinc\fR Respective side's increment in milliseconds.
.br
\fBdepth\fR Max depth to search.
.br
\fBmovetime\fR Max time to search in milliseconds.
.TP
\fBtt\fR [\fIOPTION\fR] [\fISIZE\fR]
.br
Sets or shows information about the transposition table.
.in +2n
\fBclear\fR Empties the transposition table.
.TP
\fBisready\fR
.br
Prints "readyok" if engine is ready.
.TP
\fBucinewgame\fR
.br
Resets engine for a new game.
.TP
\fBuci\fR
.br
Prints information about the engine.
.SH EXIT STATUS
.PP
If \fBbitbit\fR was killed by a signal it returns the signal + 128.
If \fBbitbit\fR exits successfully it returns 0.
.PP
If an error was encountered \fBbitbit\fR returns:
.PP
1
.in +4n
\fBbitbit\fR failed to find magic number.
.PP
2
.in +4n
\fBbitbit\fR failed to allocate transposition table because size was
too small.
.PP
3
.in +4n
\fBbitbit\fR failed to allocate transposition table due to malloc.
.SH EXAMPLES
Evaluate the starting position to depth 12 and then exit.
.PP
.in +4n
.EX
$ \fBbitbit go depth 12 , quit\fR
.EE
.PP
Set a position, do a performance test to depth 6 and then exit.
.PP
.in +4n
.EX
$ \fBbitbit\fR
bitbit Copyright (C) 2022-2024 Isak Ellmer
> \fBposition fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1\fR
> \fBperft 6\fR
g1h1: 149335005
c4c5: 92063670
d2d4: 124002076
f3d4: 129579089
b4c5: 87986826
f1f2: 123078367
nodes: 706045033
time: 1.60
mnps: 441
> \fBquit\fR
.EE
